// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
    relationMode      = "prisma"
}

model Project {
    id          String    @id @default(cuid())
    name        String
    slug        String
    description String?   @db.Text
    language    String?
    userId      String
    tasks       Task[]
    user        User      @relation(fields: [userId], references: [id])
    createdAt   DateTime  @default(now())
    deletedAt   DateTime?

    @@index([userId])
}

enum TaskStatus {
    todo
    inProgress
    done
}

model Task {
    id        String     @id @default(cuid())
    name      String
    content   String     @db.Text
    tags      Json       @db.Json
    userId    String
    projectId String
    status    TaskStatus
    user      User       @relation(fields: [userId], references: [id])
    date      DateTime
    project   Project    @relation(fields: [projectId], references: [id])
    createdAt DateTime   @default(now())
    deletedAt DateTime?

    @@index([userId])
    @@index([projectId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    refresh_token_expires_in Int?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    username      String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Project       Project[]
    Task          Task[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
